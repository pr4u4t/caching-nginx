#!/bin/bash

http_proxy_install(){
	echo "Performing http proxy installation"
	ln -sf "$1/backends-available/proxy.conf" "$1/conf.d/l2.conf"
	return 0
}

http_fastcgi_install(){
	echo "Performing fastcgi installation"
	ln -sf "$1/backends-available/fastcgi.conf" "$1/conf.d/l2.conf"
	cp contrib/phpfcgi.service /etc/systemd/system/phpfcgi.service
	return 0
}

citrix_install(){
	echo "Performing citrix installation"
	ln -sf "$1/backends-available/proxy.conf" "$1/conf.d/l2.conf"
	ln -sf "$1/snippets/citrix-session.conf" "$1/snippets-enabled/citrix-session.conf"
	return 0
}

declare -A installers=( 
	[proxy]=http_proxy_install
	[fastcgi]=http_fastcgi_install
	[citrix]=citrix_install
)

read -p "Performing new installation proceed [y/N] " -n 1 choose
if [[ $choose =~ ^[Nn]*$ ]]
then
	echo "cowardly refusing to perform installation"
	exit 1
fi

echo ""
#echo '' > install.log

service="$( systemctl status nginx | grep Loaded | awk '{ print $3 }' | sed -E "s/^[(]//" | sed -E "s/;$//" )"
if [ -z "$service" ]; then
	echo "Failed to obtain global nginx service file location"
	exit 2
fi

sdir="$( nginx -V |& grep -Eo "conf-path=[^ ]+" | sed "s/conf-path=//" | awk 'BEGIN{FS=OFS="/"}{NF--; print}' )"
if [ -z "$sdir" ]; then
	echo "Failed to obtain nginx configuration directory"
	exit 3
else
	echo "Configuration would be installed in $sdir"
fi

if [ ! -w "$sdir" ]; then
	echo "nginx configuration directory is not writeable by current user"
	exit 4
fi

cp -rf {bin,backends-available,conf.d,html,nginx.conf,README.md} $sdir &>> install.log

if [ ! -w "/etc/systemd/system" ]; then
	echo "local systemd directory is not writeable by current user"
	exit 5
fi

cp -f "$service" /etc/systemd/system &>> install.log

if [ -z "$( cat /etc/systemd/system/nginx.service | grep ExecStartPre=/etc/nginx/bin/execstartpre )" ]; then
	ln="$( cat /usr/lib/systemd/system/nginx.service | grep -nE "ExecStart" | grep -Eo "^[0-9]+" )"
	sed -i "${ln}i ExecStartPre=/etc/nginx/bin/execstartpre" /etc/systemd/system/nginx.service &>> install.log
fi

$sdir/bin/createdirs &>> install.log || { echo "Failed to create nginx runtime directories"; exit 5; }
instkeys=( ${!installers[@]} )

while :
do
	i=1
	echo "Please select a backend:"
	for backend in "${!installers[@]}"
	do
		echo "$i) $backend"
		((i=i+1))
	done
	((i=i-1))
	read -p "Please enter backend number from 1-$i: " selected
		
	if [ $selected -ge 1 ] && [ $selected -le $i ]; then
		((selected=selected-1))
		${installers[${instkeys[$selected]}]} $sdir
		break
	else
		echo "Invalid choice"
	fi
done

read -p "Enable cache purge module [y/N] " -n 1 choose
if [[ $choose =~ ^[Nn]*$ ]]
then
        exit 0
fi

echo "adding nginx cache purge module"
if [[ ! -d /usr/share/nginx/modules-available ]]; then
	mkdir -p /usr/share/nginx/modules-available || { echo "failed to create nginx/modules-available directory"; exit 6; }
fi

if [[ ! -f /usr/share/nginx/modules-available/mod-http-cache-purge.conf ]]; then
	echo "load_module modules/ngx_http_cache_purge_module.so;" > /usr/share/nginx/modules-available/mod-http-cache-purge.conf || { echo "failed to create cache purge configuration file"; exit 7; }
fi

if [[ ! -d /usr/share/nginx/modules-enabled ]]; then
	mkdir /usr/share/nginx/modules-enabled || { echo "failed to create nginx/modules-enabled directory"; exit 8; }
fi


